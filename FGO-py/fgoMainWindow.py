# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_fgoMainWindow(object):
    def setupUi(self, fgoMainWindow):
        fgoMainWindow.setObjectName("fgoMainWindow")
        fgoMainWindow.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
        fgoMainWindow.setStyleSheet("QWidget{font-family:\"Microsoft YaHei UI Light\";font-size:15px}")
        self.widget = QtWidgets.QWidget(fgoMainWindow)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.LAYOUT_INFO = QtWidgets.QFormLayout()
        self.LAYOUT_INFO.setLabelAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.LAYOUT_INFO.setObjectName("LAYOUT_INFO")
        self.LBL_APPLE = QtWidgets.QLabel(self.widget)
        self.LBL_APPLE.setMaximumSize(QtCore.QSize(16777215, 28))
        self.LBL_APPLE.setObjectName("LBL_APPLE")
        self.LAYOUT_INFO.setWidget(1, QtWidgets.QFormLayout.ItemRole.LabelRole, self.LBL_APPLE)
        self.LAYOUT_INFO_APPLE = QtWidgets.QHBoxLayout()
        self.LAYOUT_INFO_APPLE.setObjectName("LAYOUT_INFO_APPLE")
        self.CBX_APPLE = QtWidgets.QComboBox(self.widget)
        self.CBX_APPLE.setObjectName("CBX_APPLE")
        self.CBX_APPLE.addItem("")
        self.CBX_APPLE.addItem("")
        self.CBX_APPLE.addItem("")
        self.CBX_APPLE.addItem("")
        self.LAYOUT_INFO_APPLE.addWidget(self.CBX_APPLE)
        self.TXT_APPLE = QtWidgets.QSpinBox(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.TXT_APPLE.sizePolicy().hasHeightForWidth())
        self.TXT_APPLE.setSizePolicy(sizePolicy)
        self.TXT_APPLE.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.TXT_APPLE.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.TXT_APPLE.setMaximum(114514)
        self.TXT_APPLE.setObjectName("TXT_APPLE")
        self.LAYOUT_INFO_APPLE.addWidget(self.TXT_APPLE)
        self.LAYOUT_INFO.setLayout(1, QtWidgets.QFormLayout.ItemRole.FieldRole, self.LAYOUT_INFO_APPLE)
        self.LBL_TEAM = QtWidgets.QLabel(self.widget)
        self.LBL_TEAM.setObjectName("LBL_TEAM")
        self.LAYOUT_INFO.setWidget(0, QtWidgets.QFormLayout.ItemRole.LabelRole, self.LBL_TEAM)
        self.TXT_TEAM = QtWidgets.QSpinBox(self.widget)
        self.TXT_TEAM.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.TXT_TEAM.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.TXT_TEAM.setMaximum(10)
        self.TXT_TEAM.setObjectName("TXT_TEAM")
        self.LAYOUT_INFO.setWidget(0, QtWidgets.QFormLayout.ItemRole.FieldRole, self.TXT_TEAM)
        self.LBL_CURRENTDEVICE = QtWidgets.QLabel(self.widget)
        self.LBL_CURRENTDEVICE.setObjectName("LBL_CURRENTDEVICE")
        self.LAYOUT_INFO.setWidget(2, QtWidgets.QFormLayout.ItemRole.LabelRole, self.LBL_CURRENTDEVICE)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.LBL_DEVICE = QtWidgets.QLabel(self.widget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.LBL_DEVICE.sizePolicy().hasHeightForWidth())
        self.LBL_DEVICE.setSizePolicy(sizePolicy)
        self.LBL_DEVICE.setObjectName("LBL_DEVICE")
        self.horizontalLayout.addWidget(self.LBL_DEVICE)
        self.BTN_CONNECT = QtWidgets.QPushButton(self.widget)
        self.BTN_CONNECT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.BTN_CONNECT.setObjectName("BTN_CONNECT")
        self.horizontalLayout.addWidget(self.BTN_CONNECT)
        self.LAYOUT_INFO.setLayout(2, QtWidgets.QFormLayout.ItemRole.FieldRole, self.horizontalLayout)
        self.verticalLayout.addLayout(self.LAYOUT_INFO)
        self.LAYOUT_FUNC = QtWidgets.QHBoxLayout()
        self.LAYOUT_FUNC.setObjectName("LAYOUT_FUNC")
        self.LAYOUT_FUNC_BATTLE = QtWidgets.QVBoxLayout()
        self.LAYOUT_FUNC_BATTLE.setObjectName("LAYOUT_FUNC_BATTLE")
        self.BTN_CLASSIC = QtWidgets.QPushButton(self.widget)
        self.BTN_CLASSIC.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.BTN_CLASSIC.setObjectName("BTN_CLASSIC")
        self.LAYOUT_FUNC_BATTLE.addWidget(self.BTN_CLASSIC)
        self.BTN_MAIN = QtWidgets.QPushButton(self.widget)
        self.BTN_MAIN.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.BTN_MAIN.setObjectName("BTN_MAIN")
        self.LAYOUT_FUNC_BATTLE.addWidget(self.BTN_MAIN)
        self.LAYOUT_FUNC.addLayout(self.LAYOUT_FUNC_BATTLE)
        self.LAYOUT_FUMC_MAIN = QtWidgets.QVBoxLayout()
        self.LAYOUT_FUMC_MAIN.setObjectName("LAYOUT_FUMC_MAIN")
        self.BTN_PAUSE = QtWidgets.QPushButton(self.widget)
        self.BTN_PAUSE.setEnabled(False)
        self.BTN_PAUSE.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.BTN_PAUSE.setCheckable(True)
        self.BTN_PAUSE.setObjectName("BTN_PAUSE")
        self.LAYOUT_FUMC_MAIN.addWidget(self.BTN_PAUSE)
        self.BTN_STOP = QtWidgets.QPushButton(self.widget)
        self.BTN_STOP.setEnabled(False)
        self.BTN_STOP.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.BTN_STOP.setObjectName("BTN_STOP")
        self.LAYOUT_FUMC_MAIN.addWidget(self.BTN_STOP)
        self.LAYOUT_FUNC.addLayout(self.LAYOUT_FUMC_MAIN)
        self.LAYOUT_FUNC_CONTROL = QtWidgets.QVBoxLayout()
        self.LAYOUT_FUNC_CONTROL.setObjectName("LAYOUT_FUNC_CONTROL")
        self.BTN_SCREENSHOT = QtWidgets.QPushButton(self.widget)
        self.BTN_SCREENSHOT.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.BTN_SCREENSHOT.setObjectName("BTN_SCREENSHOT")
        self.LAYOUT_FUNC_CONTROL.addWidget(self.BTN_SCREENSHOT)
        self.BTN_STOPLATER = QtWidgets.QPushButton(self.widget)
        self.BTN_STOPLATER.setEnabled(False)
        self.BTN_STOPLATER.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.BTN_STOPLATER.setCheckable(True)
        self.BTN_STOPLATER.setObjectName("BTN_STOPLATER")
        self.LAYOUT_FUNC_CONTROL.addWidget(self.BTN_STOPLATER)
        self.LAYOUT_FUNC.addLayout(self.LAYOUT_FUNC_CONTROL)
        self.verticalLayout.addLayout(self.LAYOUT_FUNC)
        fgoMainWindow.setCentralWidget(self.widget)
        self.MENU = QtWidgets.QMenuBar(fgoMainWindow)
        self.MENU.setObjectName("MENU")
        self.MENU_ABOUT = QtWidgets.QMenu(self.MENU)
        self.MENU_ABOUT.setObjectName("MENU_ABOUT")
        self.MENU_FILE = QtWidgets.QMenu(self.MENU)
        self.MENU_FILE.setObjectName("MENU_FILE")
        self.MENU_SCRIPT = QtWidgets.QMenu(self.MENU)
        self.MENU_SCRIPT.setObjectName("MENU_SCRIPT")
        self.MENU_CONTROL = QtWidgets.QMenu(self.MENU)
        self.MENU_CONTROL.setObjectName("MENU_CONTROL")
        self.MENU_CONTROL_169 = QtWidgets.QMenu(self.MENU_CONTROL)
        self.MENU_CONTROL_169.setObjectName("MENU_CONTROL_169")
        self.MENU_SETTINGS = QtWidgets.QMenu(self.MENU)
        self.MENU_SETTINGS.setObjectName("MENU_SETTINGS")
        fgoMainWindow.setMenuBar(self.MENU)
        self.STATUS = QtWidgets.QStatusBar(fgoMainWindow)
        self.STATUS.setObjectName("STATUS")
        fgoMainWindow.setStatusBar(self.STATUS)
        self.MENU_ABOUT_ABOUT = QtGui.QAction(fgoMainWindow)
        self.MENU_ABOUT_ABOUT.setObjectName("MENU_ABOUT_ABOUT")
        self.MENU_FILE_EXPLORER = QtGui.QAction(fgoMainWindow)
        self.MENU_FILE_EXPLORER.setObjectName("MENU_FILE_EXPLORER")
        self.MENU_CONTROL_STAYONTOP = QtGui.QAction(fgoMainWindow)
        self.MENU_CONTROL_STAYONTOP.setCheckable(True)
        self.MENU_CONTROL_STAYONTOP.setObjectName("MENU_CONTROL_STAYONTOP")
        self.MENU_SCRIPT_GACHA = QtGui.QAction(fgoMainWindow)
        self.MENU_SCRIPT_GACHA.setObjectName("MENU_SCRIPT_GACHA")
        self.MENU_SCRIPT_SYNTHESIS = QtGui.QAction(fgoMainWindow)
        self.MENU_SCRIPT_SYNTHESIS.setObjectName("MENU_SCRIPT_SYNTHESIS")
        self.MENU_SCRIPT_GACHAHISTORY = QtGui.QAction(fgoMainWindow)
        self.MENU_SCRIPT_GACHAHISTORY.setObjectName("MENU_SCRIPT_GACHAHISTORY")
        self.MENU_SCRIPT_EXPBALL = QtGui.QAction(fgoMainWindow)
        self.MENU_SCRIPT_EXPBALL.setObjectName("MENU_SCRIPT_EXPBALL")
        self.MENU_CONTROL_MAPKEY = QtGui.QAction(fgoMainWindow)
        self.MENU_CONTROL_MAPKEY.setCheckable(True)
        self.MENU_CONTROL_MAPKEY.setObjectName("MENU_CONTROL_MAPKEY")
        self.MENU_SCRIPT_LOTTERY = QtGui.QAction(fgoMainWindow)
        self.MENU_SCRIPT_LOTTERY.setObjectName("MENU_SCRIPT_LOTTERY")
        self.MENU_SCRIPT_MAILFILTER = QtGui.QAction(fgoMainWindow)
        self.MENU_SCRIPT_MAILFILTER.setObjectName("MENU_SCRIPT_MAILFILTER")
        self.MENU_CONTROL_BENCH = QtGui.QAction(fgoMainWindow)
        self.MENU_CONTROL_BENCH.setObjectName("MENU_CONTROL_BENCH")
        self.MENU_CONTROL_EXEC = QtGui.QAction(fgoMainWindow)
        self.MENU_CONTROL_EXEC.setObjectName("MENU_CONTROL_EXEC")
        self.MENU_SETTINGS_DEFEATED = QtGui.QAction(fgoMainWindow)
        self.MENU_SETTINGS_DEFEATED.setCheckable(True)
        self.MENU_SETTINGS_DEFEATED.setObjectName("MENU_SETTINGS_DEFEATED")
        self.MENU_SETTINGS_KIZUNAREISOU = QtGui.QAction(fgoMainWindow)
        self.MENU_SETTINGS_KIZUNAREISOU.setCheckable(True)
        self.MENU_SETTINGS_KIZUNAREISOU.setObjectName("MENU_SETTINGS_KIZUNAREISOU")
        self.MENU_SETTINGS_SPECIALDROP = QtGui.QAction(fgoMainWindow)
        self.MENU_SETTINGS_SPECIALDROP.setObjectName("MENU_SETTINGS_SPECIALDROP")
        self.MENU_ABOUT_LICENSE = QtGui.QAction(fgoMainWindow)
        self.MENU_ABOUT_LICENSE.setObjectName("MENU_ABOUT_LICENSE")
        self.MENU_FILE_QUIT = QtGui.QAction(fgoMainWindow)
        self.MENU_FILE_QUIT.setObjectName("MENU_FILE_QUIT")
        self.MENU_CONTROL_TRAY = QtGui.QAction(fgoMainWindow)
        self.MENU_CONTROL_TRAY.setCheckable(True)
        self.MENU_CONTROL_TRAY.setObjectName("MENU_CONTROL_TRAY")
        self.MENU_CONTROL_169_INVOKE = QtGui.QAction(fgoMainWindow)
        self.MENU_CONTROL_169_INVOKE.setObjectName("MENU_CONTROL_169_INVOKE")
        self.MENU_CONTROL_169_REVOKE = QtGui.QAction(fgoMainWindow)
        self.MENU_CONTROL_169_REVOKE.setObjectName("MENU_CONTROL_169_REVOKE")
        self.MENU_CONTROL_NOTIFY = QtGui.QAction(fgoMainWindow)
        self.MENU_CONTROL_NOTIFY.setCheckable(True)
        self.MENU_CONTROL_NOTIFY.setObjectName("MENU_CONTROL_NOTIFY")
        self.MENU_ABOUT.addAction(self.MENU_ABOUT_ABOUT)
        self.MENU_ABOUT.addAction(self.MENU_ABOUT_LICENSE)
        self.MENU_FILE.addAction(self.MENU_FILE_EXPLORER)
        self.MENU_SCRIPT.addAction(self.MENU_SCRIPT_GACHA)
        self.MENU_SCRIPT.addAction(self.MENU_SCRIPT_LOTTERY)
        self.MENU_SCRIPT.addAction(self.MENU_SCRIPT_MAILFILTER)
        self.MENU_SCRIPT.addAction(self.MENU_SCRIPT_SYNTHESIS)
        self.MENU_SCRIPT.addAction(self.MENU_SCRIPT_GACHAHISTORY)
        self.MENU_SCRIPT.addAction(self.MENU_SCRIPT_EXPBALL)
        self.MENU_CONTROL_169.addAction(self.MENU_CONTROL_169_INVOKE)
        self.MENU_CONTROL_169.addAction(self.MENU_CONTROL_169_REVOKE)
        self.MENU_CONTROL.addAction(self.MENU_CONTROL_STAYONTOP)
        self.MENU_CONTROL.addAction(self.MENU_CONTROL_TRAY)
        self.MENU_CONTROL.addSeparator()
        self.MENU_CONTROL.addAction(self.MENU_CONTROL_MAPKEY)
        self.MENU_CONTROL.addAction(self.MENU_CONTROL_169.menuAction())
        self.MENU_CONTROL.addAction(self.MENU_CONTROL_NOTIFY)
        self.MENU_CONTROL.addSeparator()
        self.MENU_CONTROL.addAction(self.MENU_CONTROL_BENCH)
        self.MENU_CONTROL.addAction(self.MENU_CONTROL_EXEC)
        self.MENU_SETTINGS.addAction(self.MENU_SETTINGS_DEFEATED)
        self.MENU_SETTINGS.addAction(self.MENU_SETTINGS_KIZUNAREISOU)
        self.MENU_SETTINGS.addAction(self.MENU_SETTINGS_SPECIALDROP)
        self.MENU.addAction(self.MENU_FILE.menuAction())
        self.MENU.addAction(self.MENU_SCRIPT.menuAction())
        self.MENU.addAction(self.MENU_SETTINGS.menuAction())
        self.MENU.addAction(self.MENU_CONTROL.menuAction())
        self.MENU.addAction(self.MENU_ABOUT.menuAction())

        self.retranslateUi(fgoMainWindow)
        self.CBX_APPLE.setCurrentIndex(0)
        self.BTN_CLASSIC.clicked.connect(fgoMainWindow.runClassic) # type: ignore
        self.BTN_MAIN.clicked.connect(fgoMainWindow.runMain) # type: ignore
        self.BTN_SCREENSHOT.clicked.connect(fgoMainWindow.screenshot) # type: ignore
        self.BTN_PAUSE.clicked['bool'].connect(fgoMainWindow.pause) # type: ignore
        self.BTN_STOP.clicked.connect(fgoMainWindow.stop) # type: ignore
        self.BTN_CONNECT.clicked.connect(fgoMainWindow.connect) # type: ignore
        self.MENU_FILE_EXPLORER.triggered.connect(fgoMainWindow.explorerHere) # type: ignore
        self.MENU_ABOUT_ABOUT.triggered.connect(fgoMainWindow.about) # type: ignore
        self.MENU_SCRIPT_GACHA.triggered.connect(fgoMainWindow.runGacha) # type: ignore
        self.MENU_SCRIPT_SYNTHESIS.triggered.connect(fgoMainWindow.runSynthesis) # type: ignore
        self.MENU_SCRIPT_GACHAHISTORY.triggered.connect(fgoMainWindow.runGachaHistory) # type: ignore
        self.MENU_SCRIPT_EXPBALL.triggered.connect(fgoMainWindow.expBall) # type: ignore
        self.MENU_CONTROL_MAPKEY.triggered['bool'].connect(fgoMainWindow.mapKey) # type: ignore
        self.BTN_STOPLATER.clicked['bool'].connect(fgoMainWindow.stopLater) # type: ignore
        self.MENU_SCRIPT_LOTTERY.triggered.connect(fgoMainWindow.runLottery) # type: ignore
        self.MENU_SCRIPT_MAILFILTER.triggered.connect(fgoMainWindow.runMail) # type: ignore
        self.MENU_CONTROL_BENCH.triggered.connect(fgoMainWindow.bench) # type: ignore
        self.MENU_CONTROL_EXEC.triggered.connect(fgoMainWindow.exec) # type: ignore
        self.MENU_SETTINGS_SPECIALDROP.triggered.connect(fgoMainWindow.stopOnSpecialDrop) # type: ignore
        self.MENU_ABOUT_LICENSE.triggered.connect(fgoMainWindow.license) # type: ignore
        self.MENU_CONTROL_169_INVOKE.triggered.connect(fgoMainWindow.invoke169) # type: ignore
        self.MENU_CONTROL_169_REVOKE.triggered.connect(fgoMainWindow.revoke169) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(fgoMainWindow)
        fgoMainWindow.setTabOrder(self.TXT_TEAM, self.CBX_APPLE)
        fgoMainWindow.setTabOrder(self.CBX_APPLE, self.TXT_APPLE)
        fgoMainWindow.setTabOrder(self.TXT_APPLE, self.BTN_CLASSIC)
        fgoMainWindow.setTabOrder(self.BTN_CLASSIC, self.BTN_MAIN)
        fgoMainWindow.setTabOrder(self.BTN_MAIN, self.BTN_PAUSE)
        fgoMainWindow.setTabOrder(self.BTN_PAUSE, self.BTN_STOP)
        fgoMainWindow.setTabOrder(self.BTN_STOP, self.BTN_SCREENSHOT)
        fgoMainWindow.setTabOrder(self.BTN_SCREENSHOT, self.BTN_STOPLATER)

    def retranslateUi(self, fgoMainWindow):
        _translate = QtCore.QCoreApplication.translate
        fgoMainWindow.setWindowTitle(_translate("fgoMainWindow", "FGO-py - hgjazhgj"))
        self.LBL_APPLE.setText(_translate("fgoMainWindow", "苹果"))
        self.CBX_APPLE.setStatusTip(_translate("fgoMainWindow", "要吃的苹果种类,在运行前设置"))
        self.CBX_APPLE.setItemText(0, _translate("fgoMainWindow", "金"))
        self.CBX_APPLE.setItemText(1, _translate("fgoMainWindow", "银"))
        self.CBX_APPLE.setItemText(2, _translate("fgoMainWindow", "铜"))
        self.CBX_APPLE.setItemText(3, _translate("fgoMainWindow", "彩"))
        self.TXT_APPLE.setStatusTip(_translate("fgoMainWindow", "要吃的苹果数量,在运行前设置"))
        self.LBL_TEAM.setText(_translate("fgoMainWindow", "编队位置"))
        self.TXT_TEAM.setStatusTip(_translate("fgoMainWindow", "所选编队在队伍编成界面的位置,从左到右1-10,0为无效"))
        self.LBL_CURRENTDEVICE.setText(_translate("fgoMainWindow", "当前设备"))
        self.BTN_CONNECT.setStatusTip(_translate("fgoMainWindow", "连接到设备"))
        self.BTN_CONNECT.setText(_translate("fgoMainWindow", "更改"))
        self.BTN_CLASSIC.setStatusTip(_translate("fgoMainWindow", "经典战斗"))
        self.BTN_CLASSIC.setText(_translate("fgoMainWindow", "经典战斗"))
        self.BTN_MAIN.setStatusTip(_translate("fgoMainWindow", "在关卡列表界面将要刷的关卡置于第一个来清空体力"))
        self.BTN_MAIN.setText(_translate("fgoMainWindow", "肝!"))
        self.BTN_PAUSE.setStatusTip(_translate("fgoMainWindow", "暂停/继续战斗"))
        self.BTN_PAUSE.setText(_translate("fgoMainWindow", "挂起战斗"))
        self.BTN_STOP.setStatusTip(_translate("fgoMainWindow", "立刻终止战斗"))
        self.BTN_STOP.setText(_translate("fgoMainWindow", "终止战斗"))
        self.BTN_SCREENSHOT.setStatusTip(_translate("fgoMainWindow", "检查截图确定连接建立"))
        self.BTN_SCREENSHOT.setText(_translate("fgoMainWindow", "检查截图"))
        self.BTN_STOPLATER.setStatusTip(_translate("fgoMainWindow", "在完成若干场战斗后终止战斗"))
        self.BTN_STOPLATER.setText(_translate("fgoMainWindow", "预约终止"))
        self.MENU_ABOUT.setTitle(_translate("fgoMainWindow", "关于"))
        self.MENU_FILE.setTitle(_translate("fgoMainWindow", "文件"))
        self.MENU_SCRIPT.setTitle(_translate("fgoMainWindow", "脚本"))
        self.MENU_CONTROL.setTitle(_translate("fgoMainWindow", "控制"))
        self.MENU_CONTROL_169.setTitle(_translate("fgoMainWindow", "全面屏适配"))
        self.MENU_SETTINGS.setTitle(_translate("fgoMainWindow", "设置"))
        self.MENU_ABOUT_ABOUT.setText(_translate("fgoMainWindow", "关于"))
        self.MENU_FILE_EXPLORER.setText(_translate("fgoMainWindow", "资源管理器"))
        self.MENU_CONTROL_STAYONTOP.setText(_translate("fgoMainWindow", "窗口置顶"))
        self.MENU_SCRIPT_GACHA.setText(_translate("fgoMainWindow", "抽友情"))
        self.MENU_SCRIPT_GACHA.setStatusTip(_translate("fgoMainWindow", "先抽一发友情十连,在结算界面运行本功能"))
        self.MENU_SCRIPT_SYNTHESIS.setText(_translate("fgoMainWindow", "礼装强化"))
        self.MENU_SCRIPT_SYNTHESIS.setStatusTip(_translate("fgoMainWindow", "在选择了强化对象未选择强化材料的界面运行本功能"))
        self.MENU_SCRIPT_GACHAHISTORY.setText(_translate("fgoMainWindow", "召唤记录"))
        self.MENU_SCRIPT_GACHAHISTORY.setStatusTip(_translate("fgoMainWindow", "统计导出召唤记录,在抽卡记录页面运行"))
        self.MENU_SCRIPT_EXPBALL.setText(_translate("fgoMainWindow", "搓丸子"))
        self.MENU_SCRIPT_EXPBALL.setStatusTip(_translate("fgoMainWindow", "把若干张低星礼装合并成一个"))
        self.MENU_CONTROL_MAPKEY.setText(_translate("fgoMainWindow", "加载按键映射"))
        self.MENU_SCRIPT_LOTTERY.setText(_translate("fgoMainWindow", "抽奖池"))
        self.MENU_SCRIPT_MAILFILTER.setText(_translate("fgoMainWindow", "领狗粮"))
        self.MENU_CONTROL_BENCH.setText(_translate("fgoMainWindow", "Bench"))
        self.MENU_CONTROL_EXEC.setText(_translate("fgoMainWindow", "Execute"))
        self.MENU_SETTINGS_DEFEATED.setText(_translate("fgoMainWindow", "战败撤退时终止脚本运行"))
        self.MENU_SETTINGS_KIZUNAREISOU.setText(_translate("fgoMainWindow", "获得羁绊礼装时终止脚本运行"))
        self.MENU_SETTINGS_SPECIALDROP.setText(_translate("fgoMainWindow", "若干特殊掉落后终止脚本运行"))
        self.MENU_ABOUT_LICENSE.setText(_translate("fgoMainWindow", "使用许可"))
        self.MENU_FILE_QUIT.setText(_translate("fgoMainWindow", "退出"))
        self.MENU_CONTROL_TRAY.setText(_translate("fgoMainWindow", "关闭到托盘"))
        self.MENU_CONTROL_169_INVOKE.setText(_translate("fgoMainWindow", "调整为16:9"))
        self.MENU_CONTROL_169_REVOKE.setText(_translate("fgoMainWindow", "恢复原分辨率"))
        self.MENU_CONTROL_NOTIFY.setText(_translate("fgoMainWindow", "消息推送"))
